name: Build and Push APKs to App Branch

on:
  push:
    branches: [main]
    paths:
      - 'app.json'
      - 'android/**'
      - 'expo/**'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Set up Java and Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Dependencies
        run: npm install --legacy-peer-deps

      - name: Run Expo Prebuild
        run: npx expo prebuild

      - name: Build APKs
        run: |
          echo "Enabling ABI splits"
          echo '
          android {
              ...
              splits {
                  abi {
                      enable true
                      reset()
                      include "armeabi-v7a", "arm64-v8a"
                      universalApk false
                  }
              }
          }' >> android/app/build.gradle
          
          cd android && ./gradlew assembleRelease

      - name: Read version from app.json
        id: version
        run: |
          echo "VERSION=$(node -p "require('./app.json').expo.version")" >> $GITHUB_ENV

      - name: Create Output Directory
        run: |
          mkdir -p release
          mkdir -p build

      - name: Copy APKs and Create version.json
        run: |
          ABIS=("armeabi-v7a" "arm64-v8a")
          echo '{ "version": "'${{ env.VERSION }}'", "apks": [' > release/version.json

          for ABI in "${ABIS[@]}"; do
            APK_SRC="android/app/build/outputs/apk/release/app-${ABI}-release.apk"
            APK_DEST="build/app-${ABI}-v${{ env.VERSION }}.apk"
            if [ -f "$APK_SRC" ]; then
              cp "$APK_SRC" "$APK_DEST"
              echo '  { "abi": "'$ABI'", "file": "'$(basename "$APK_DEST")'" },' >> release/version.json
            fi
          done

          sed -i '$ s/,$//' release/version.json
          echo ']}' >> release/version.json
          echo > release/.nojekyll

      - name: Push to `app` branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
          destination_dir: .   # to push in root
          publish_branch: app
          keep_files: true

      - name: Push release metadata
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git checkout -B app
          cp -r release/* .
          git add version.json .nojekyll
          git commit -m "Update version metadata for v${{ env.VERSION }}"
          git push origin app --force
